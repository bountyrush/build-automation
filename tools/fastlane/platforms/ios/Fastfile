begin
  puts "ROOT_FOLDER_PATH : #{ROOT_FOLDER_PATH}"
  $BundleIdentifier = ''
  $XcodeProjectPath = ''
  $OutputName = ''

  platform :ios do
    before_all do
      $BundleIdentifier = ENV["IOS_BUNDLE_IDENTIFIER"] || ENV["BUNDLE_IDENTIFIER"]
      $XcodeProjectPath = File.join($PlatformProjectBuildPath, ENV["IOS_TARGET_SCHEME"] + ".xcodeproj").freeze
      $OutputName       = ENV["PRODUCT_NAME"] + ".ipa";
    end

    desc "Build xcode project"
    lane :build do |values|
      configuration = values[:configuration]
      export_method = values[:export_method]
      gym(
        project: $XcodeProjectPath,
        output_directory: $OutputDirectory,
        output_name: $OutputName,
        configuration: configuration,
        export_method: export_method
      )
    end

    desc "Upload ipa file to AppStoreConnect and check if AppStore site is configures correctly"
    lane :upload do
      pilot(
        ipa: $OutputDirectory + "/" + $OutputName, 
        skip_submission:true
      )
      
      say "A new build is ready to deploy on testflight!"
      
      #https://docs.fastlane.tools/actions/deliver/ for updating meta data automatically
      
    end

    desc "For matching certificates"
    lane :match_profile do |values|
      type  = values[:type]
      puts "Matching profiles for for #{type}"
      match(type: type, app_identifier: $BundleIdentifier, git_url: ENV["IOS_CERTIFICATES_GIT_URL"], force: true)

      mapping = Actions.lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]
      puts "mapping #{mapping}"
      update_code_signing_settings(use_automatic_signing: false, path: $XcodeProjectPath, profile_name: mapping[ENV['MATCH_APP_IDENTIFIER']])
    end

    desc "Create app"
    lane :create do
      produce(
        username: ENV["IOS_APP_STORE_USER_NAME"],
        app_name: ENV["PRODUCT_TITLE"]
      )
    end

    desc "Build for dev"
    lane :dev do
      setupXcodeProject()
      match_profile(type: 'development')
      build(configuration: 'Debug', export_method: 'development')
    end

    desc "Build for release"
    lane :release do
      setupXcodeProject()
      match_profile(type: 'appstore')
      build(configuration: 'Release', export_method: 'app-store')
      upload
    end

    after_all do |lane|
      say "Finished lane #{lane} for #{ENV["PRODUCT_NAME"]}."
    end

    error do |lane, exception| 
      say "Error when running fastlane"
    end
  end

  def bumpVersion()
    # Set version number first
    increment_version_number(
      xcodeproj: $XcodeProjectPath,
      version_number: ENV["PRODUCT_VERSION"] # Set a specific version number
    )
    # Increment build number
    increment_build_number(xcodeproj: $XcodeProjectPath)
  end

  def setupXcodeProject()
    setXcodeBuildSettings()
    bumpVersion()
  end

  def setXcodeBuildSettings()
    fastlane_require 'xcodeproj'
    project = Xcodeproj::Project.open($XcodeProjectPath)
    target = project.native_targets.detect { |target| target.name == ENV["IOS_TARGET_SCHEME"] }
    target.build_configurations.each do |item|
      item.build_settings['VERSIONING_SYSTEM'] = "apple-generic"
      if item.name == 'Debug'
        item.build_settings['CODE_SIGN_IDENTITY'] = 'iPhone Developer'
        item.build_settings['CODE_SIGN_IDENTITY[sdk=iphoneos*]'] = 'iPhone Developer'
        item.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = "match Development #{$BundleIdentifier}"
      else
        item.build_settings['CODE_SIGN_IDENTITY'] = 'iPhone Distribution'
        item.build_settings['CODE_SIGN_IDENTITY[sdk=iphoneos*]'] = 'iPhone Distribution'
        item.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = "match AppStore #{$BundleIdentifier}"
      end
      if(item.build_settings['CURRENT_PROJECT_VERSION'] == '') #If empty set it. Else don't
        item.build_settings['CURRENT_PROJECT_VERSION'] = 1
      end
    end
    project.save
  end
end
